plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.181'
    id 'net.neoforged.gradle.common' version '7.0.181'
    id 'antlr'
}


tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = "$mod_id-$minecraft_version"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
    generated
}

runs {
    configureEach {run ->
        run.systemProperties 'stackupper.debug': 'true'
    }
}

apply from: 'gradle/scripts/dependencies.gradle'

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

generateGrammarSource {
    maxHeapSize = "128m"
    arguments += ["-visitor", "-package", "yuria.sul"]
    outputDirectory = file("${project.buildDir}/generated-src/antlr/main/yuria/sul")
}
compileJava.dependsOn generateGrammarSource

build {
    test.setEnabled(false)
}

tasks.named("test", Test) {
    useJUnitPlatform()
}